{"version":3,"sources":["../../src/index.js","App.jsx","index.js"],"names":["calcVolumeX","volume","sliderWidth","Math","ReactAudioControl","extVolume","updateVolume","togglePlay","styling","title","debug","useState","setSliderWidth","setVolume","lastVolume","setLastVolume","delta","setDelta","sliderDivRef","useRef","containerSizes","useResizeObserver","useEffect","setNewVolume","newVolume","handlers","useSwipeable","onSwiped","evt","console","onSwiping","data","startX","pctX","deltaVolume","swipingHandler","onTap","preventDefaultTouchmoveEvent","trackMouse","trackTouch","style","ref","onTouchEnd","e","onClick","PropTypes","bool","back","slider","Container","styled","VolumeSlider","props","RacTitle","Debug","VolButton","App","audioRef","isPlaying","setIsPlaying","current","Object","onended","className","src","fontWeight","href","fontSize","margin","vol","pause","play","backgroundColor","borderBottom","fontFamily","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8740f00e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSwipeable } from 'react-swipeable'\nimport { useResizeObserver } from 'beautiful-react-hooks'\nimport styled from 'styled-components'\n\nconst calcVolumeX = (volume, sliderWidth) => {\n  return Math.round((sliderWidth * volume) / 100)\n}\n\nexport const ReactAudioControl = ({\n  extVolume,\n  updateVolume,\n  togglePlay,\n  styling,\n  title,\n  debug = false,\n}) => {\n  const [sliderWidth, setSliderWidth] = useState(0)\n  const [volume, setVolume] = useState(extVolume)\n  const [lastVolume, setLastVolume] = useState(extVolume)\n\n  const [delta, setDelta] = useState(undefined)\n\n  const sliderDivRef = useRef(null)\n  const containerSizes = useResizeObserver(sliderDivRef)\n\n  useEffect(() => {\n    setSliderWidth(containerSizes?.width || sliderDivRef.current.clientWidth)\n  }, [containerSizes])\n\n  useEffect(() => {\n    updateVolume(volume / 100)\n  }, [volume])\n\n  const setNewVolume = (newVolume) => {\n    if (newVolume < 0) setVolume(0)\n    else if (newVolume > 100) setVolume(100)\n    else setVolume(newVolume)\n  }\n\n  // TODO: Consider some factor to move faster if moving long\n  // TODO: prevent text selection\n  // https://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag#5432363\n\n  const swipedHandler = (evt) => {\n    if (debug) console.log('swiped', evt.deltaX, evt.velocity)\n    setLastVolume(volume)\n  }\n\n  const swipingHandler = (data) => {\n    const startX = data.initial[0]\n    const pctX = data.deltaX / sliderWidth\n    const deltaVolume = (1 + pctX) * lastVolume\n    if (debug) {\n      console.log(\n        `swiping ${data.first ? 'first' : ' -> '} absX ${data.absX}`,\n        ` deltaX ${data.deltaX} startX ${startX} pos ${startX + data.absX}`,\n        ` pctX ${pctX} deltaVolume ${deltaVolume} (velocity ${data.velocity})`\n      )\n    }\n    setNewVolume(deltaVolume)\n    setDelta(data.deltaX)\n  }\n\n  const playToggler = (evt) => {\n    if (debug) console.log('toggling play', evt)\n    togglePlay()\n  }\n\n  const handlers = useSwipeable({\n    onSwiped: (evnt) => swipedHandler(evnt),\n    onSwiping: (dt) => swipingHandler(dt),\n    onTap: (evnt) => playToggler(evnt),\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n    trackTouch: true,\n  })\n\n  return (\n    <div>\n      <Container style={styling.back} ref={sliderDivRef}>\n        <div {...handlers} onTouchEnd={(e) => e.preventDefault()}>\n          <VolumeSlider style={styling.slider} volume={calcVolumeX(volume, sliderWidth)}>\n            <RacTitle style={styling.title}>{title}</RacTitle>\n          </VolumeSlider>\n        </div>\n      </Container>\n      {debug && (\n        <Debug>\n          <div>\n            <VolButton onClick={() => setNewVolume(volume + 5)}>+</VolButton>\n            <VolButton onClick={() => setNewVolume(volume - 5)}>-</VolButton>\n          </div>\n          <div>\n            sliderWidth: {sliderWidth} | volume: {volume} ({lastVolume})|\n            volumeX: {calcVolumeX(volume, sliderWidth)} | delta: {delta}\n          </div>\n        </Debug>\n      )}\n    </div>\n  )\n}\n\nReactAudioControl.propTypes = {\n  extVolume: PropTypes.number,\n  updateVolume: PropTypes.func.isRequired,\n  togglePlay: PropTypes.func.isRequired,\n  styling: PropTypes.object,\n  title: PropTypes.string.isRequired,\n  debug: PropTypes.bool,\n}\n\nReactAudioControl.defaultProps = {\n  extVolume: 20,\n  styling: {\n    back: {},\n    slider: {},\n    title: {},\n  },\n  debug: false,\n}\n\nconst Container = styled.div`\n  background-color: maroon;\n  color: white;\n  min-height: 2em;\n  margin-top: 2vh;\n  width: 100%;\n`\n\nconst VolumeSlider = styled.div`\n  width: ${(props) => props.volume}px;\n  min-height: 2em;\n  background-color: red;\n  border-right: solid 2px #ffddaa;\n  cursor: hand;\n`\n\nconst RacTitle = styled.div`\n  z-index: 10;\n  height: 2em;\n  padding-left: 10px;\n  position: fixed;\n  display: flex;\n  font-weight: bold;\n  vertical-align: middle;\n  text-overflow: ellipsis;\n`\n\nconst Debug = styled.div`\n  z-index: 20;\n  background: rgba(200, 200, 200, 0.5);\n  position: absolute;\n  margin-top: 1em;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`\n\nconst VolButton = styled.button`\n  margin: 2px;\n  font-size: 1.5em;\n  width: 100px;\n  height: 2em;\n`\n","import React, { useRef, useState, useEffect } from 'react'\n\nimport { ReactAudioControl } from 'react-audio-control'\nimport 'react-audio-control/dist/index.css'\n\nconst App = () => {\n\n const audioRef = useRef()\n  const [isPlaying, setIsPlaying] = useState(false)\n\n  const togglePlay = () => {\n    if (isPlaying) {\n      audioRef.current.pause()\n      setIsPlaying(false)\n    } else {\n      audioRef.current.play()\n      setIsPlaying(true)\n    }\n  };\n\n  const updateVolume = (vol) => {\n    audioRef.current.volume = vol\n  }\n\n  useEffect(() => {\n    if (audioRef.current instanceof Object) {\n      audioRef.current.onended = () => {\n        setIsPlaying(false)\n      }\n    }\n  }, [audioRef.current])\n\n  return (\n    <div className=\"main\">\n      <audio\n        ref={audioRef}\n        src={'/audio_d29a0439c8.mp3'}\n      />\n      <div style={{fontWeight: 'bold'}}>This is a test application to show the use of <a href=\"https://github.com/aweibell/react-audio-control\">react-audio-control</a></div>\n      <div style={{fontWeight: 'normal', fontSize: 'smaller'}}> Music by <a href=\"https://pixabay.com/users/timmoor-18879564/?tab=audio&amp;utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=audio&amp;utm_content=2592\">TimMoor</a> from <a href=\"https://pixabay.com/music/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=music&amp;utm_content=2592\">Pixabay</a></div>\n      <div style={{margin: '3em'}}>\n        <ReactAudioControl\n          updateVolume={updateVolume}\n          togglePlay={togglePlay}\n          styling={{\n            slider: {backgroundColor: 'teal'},\n            back: {backgroundColor: '#044', borderBottom: isPlaying ? 'solid 4px cyan' : 'solid 4px transparent'},\n            title: {fontFamily: 'Segoe Print'}\n          }}\n          title={'Theme by TimMoor'}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App.jsx'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}